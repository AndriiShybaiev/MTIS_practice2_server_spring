/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Devolver;
import io.swagger.model.Dispositivo;
import io.swagger.model.InlineResponse2002;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-03-02T00:36:42.320Z[GMT]")
@Validated
public interface DispositivosApi {

    @Operation(summary = "", description = "", tags={ "dispositivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))),
        
        @ApiResponse(responseCode = "409", description = "already exist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))) })
    @RequestMapping(value = "/dispositivos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Devolver> addDispositivo(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "restKey", required = true) String restKey, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Dispositivo body);


    @Operation(summary = "", description = "", tags={ "dispositivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "all of dispositivos table", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Dispositivo.class)))),
        
        @ApiResponse(responseCode = "400", description = "invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))) })
    @RequestMapping(value = "/dispositivos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Dispositivo>> allDispositivos(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "restKey", required = true) String restKey);


    @Operation(summary = "", description = "", tags={ "dispositivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))) })
    @RequestMapping(value = "/dispositivos/{idDispositivo}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Devolver> deleteDispositivo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idDispositivo") String idDispositivo, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "restKey", required = true) String restKey);


    @Operation(summary = "gwt dispositivo by id", description = "", tags={ "dispositivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "search results by criteria", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2002.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))) })
    @RequestMapping(value = "/dispositivos/{idDispositivo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2002> searchDispositivo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idDispositivo") String idDispositivo, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "restKey", required = true) String restKey);


    @Operation(summary = "", description = "", tags={ "dispositivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Devolver.class))) })
    @RequestMapping(value = "/dispositivos/{idDispositivo}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Devolver> updateDispositivo(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "restKey", required = true) String restKey, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idDispositivo") String idDispositivo, @Parameter(in = ParameterIn.DEFAULT, description = "Salas", required=true, schema=@Schema()) @Valid @RequestBody Dispositivo body);

}

